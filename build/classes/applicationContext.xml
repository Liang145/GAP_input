<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
         http://www.springframework.org/schema/mvc    
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        "
	xmlns:mvc="http://www.springframework.org/schema/mvc">



	<!-- 配置引入外部properties文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties </value>
				<value>classpath:hibernate.properties </value>
			</list>
		</property>
	</bean>

	<!-- Tomcat JDBC pool <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" 
		destroy-method="close"> <property name="poolProperties"> <bean class="org.apache.tomcat.jdbc.pool.PoolProperties"> 
		<property name="url" value="${jdbc.url}" /> <property name="driverClassName" 
		value="${jdbc.driverClassName}" /> <property name="username" value="${jdbc.username}" 
		/> <property name="password" value="${jdbc.passwrod}" /> </bean> </property> 
		</bean> -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		
		<property name="driverClass"><value>${jdbc.driverClassName}</value></property>  
        <property name="jdbcUrl"><value>${jdbc.url}</value></property>                 
        <property name="user"><value>${jdbc.username}</value></property>  
        <property name="password"><value>${jdbc.password}</value></property>
        
        <property name="minPoolSize"><value>${jdbc.minPoolSize}</value></property>
        <property name="maxPoolSize"><value>${jdbc.maxPoolSize}</value></property>
        <property name="initialPoolSize"><value>${jdbc.initialPoolSize}</value></property>
        <property name="maxStatements"><value>${jdbc.maxStatements}</value></property>
        <property name="maxIdleTime"><value>${jdbc.maxIdleTime}</value></property>
        <property name="autoCommitOnClose"><value>${jdbc.autoCommitOnClose}</value></property>
        <property name="breakAfterAcquireFailure"><value>${jdbc.breakAfterAcquireFailure}</value></property>
        <property name="idleConnectionTestPeriod"><value>${jdbc.idleConnectionTestPeriod}</value></property>
        <property name="preferredTestQuery"><value>${jdbc.preferredTestQuery}</value></property>
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 为处理Blob类型字段的句柄声明 -->
		<!-- <property name="lobHandler" ref="lobHandler" /> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
			</props>
		</property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/jet/vframe/**/pojo</value>
			</list>
		</property>
	</bean>

	<!-- SpringContextUtil -->
	<bean class="com.jet.vframe.sys.tool.SpringContextUtil" />

	<!-- 使用 annotation 自动注册service dao bean,并检查@Service @Dao注解已被注入 -->
	<context:component-scan base-package="com.jet.vframe.**.service.impl"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<context:component-scan base-package="com.jet.vframe.**.dao.impl"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
	</context:component-scan>

	<context:component-scan base-package="com.jet.vframe.**.component"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
	</context:component-scan>




	<!-- 事务管理器 -->
	<!-- 声明Hibernate事务管理，注入Session工厂 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
	<!-- 需要引入tx的命名空间 -->
	<!-- 这是事务通知操作，使用的事务管理器引用自 transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 指定哪些方法需要加入事务，这里懒惰一下全部加入，可以使用通配符来只加入需要的方法 -->

			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 需要引入aop的命名空间 -->
	<aop:config>
		<!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
		<aop:pointcut id="daoMethods"
			expression="execution(* com.jet.vframe..service.*.*(..))" />
		<!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="daoMethods" />
	</aop:config>
</beans>